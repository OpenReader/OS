	/******************************************************************************/
/* Important Spring 2018 CSCI 402 usage information:                          */
/*                                                                            */
/* This fils is part of CSCI 402 kernel programming assignments at USC.       */
/*         53616c7465645f5f2e8d450c0c5851acd538befe33744efca0f1c4f9fb5f       */
/*         3c8feabc561a99e53d4d21951738da923cd1c7bbd11b30a1afb11172f80b       */
/*         984b1acfbbf8fae6ea57e0583d2610a618379293cb1de8e1e9d07e6287e8       */
/*         de7e82f3d48866aa2009b599e92c852f7dbf7a6e573f1c7228ca34b9f368       */
/*         faaef0c0fcf294cb                                                   */
/* Please understand that you are NOT permitted to distribute or publically   */
/*         display a copy of this file (or ANY PART of it) for any reason.    */
/* If anyone (including your prospective employer) asks you to post the code, */
/*         you must inform them that you do NOT have permissions to do so.    */
/* You are also NOT permitted to remove or alter this comment block.          */
/* If this comment block is removed or altered in a submitted file, 20 points */
/*         will be deducted.                                                  */
/******************************************************************************/

#include "kernel.h"
#include "globals.h"
#include "types.h"
#include "errno.h"

#include "util/string.h"
#include "util/printf.h"
#include "util/debug.h"

#include "fs/dirent.h"
#include "fs/fcntl.h"
#include "fs/stat.h"
#include "fs/vfs.h"
#include "fs/vnode.h"

/* This takes a base 'dir', a 'name', its 'len', and a result vnode.
 * Most of the work should be done by the vnode's implementation
 * specific lookup() function.
 *
 * If dir has no lookup(), return -ENOTDIR.
 *
 * Note: returns with the vnode refcount on *result incremented.
 */
int
lookup(vnode_t *dir, const char *name, size_t len, vnode_t **result)
{
        /*NOT_YET_IMPLEMENTED("VFS: lookup");*/
        int res=0;
        KASSERT(NULL != dir);
        dbg(DBG_PRINT, "(GRADING2A 2.a)\n");
        KASSERT(NULL != name);
        dbg(DBG_PRINT, "(GRADING2A 2.a)\n");
        if(!S_ISDIR(dir->vn_mode))
        {
            dbg(DBG_PRINT, "(GRADING2B)\n");
        	return -ENOTDIR;
        }

        else
        {
        	dbg(DBG_PRINT, "(GRADING2A)\n");
            res = dir->vn_ops->lookup(dir, name, len, result);
        }
        KASSERT(NULL != result);
        dbg(DBG_PRINT, "(GRADING2A 2.a)\n");

        return res;

       /*return 0;*/
}


/* When successful this function returns data in the following "out"-arguments:
 *  o res_vnode: the vnode of the parent directory of "name"
 *  o name: the `basename' (the element of the pathname)
 *  o namelen: the length of the basename
 *
 * For example: dir_namev("/s5fs/bin/ls", &namelen, &name, NULL,
 * &res_vnode) would put 2 in namelen, "ls" in name, and a pointer to the
 * vnode corresponding to "/s5fs/bin" in res_vnode.
 *
 * The "base" argument defines where we start resolving the path from:
 * A base value of NULL means to use the process's current working directory,
 * curproc->p_cwd.  If pathname[0] == '/', ignore base and start with
 * vfs_root_vn.  dir_namev() should call lookup() to take care of resolving each
 * piece of the pathname.
 *
 * Note: A successful call to this causes vnode refcount on *res_vnode to
 * be incremented.
 */
int
dir_namev(const char *pathname, size_t *namelen, const char **name,
          vnode_t *base, vnode_t **res_vnode)
{
    int str_len, txt_strt = 0, frag_len, ret_val, i;
    vnode_t *loc_base;
    KASSERT(NULL != pathname);

    dbg(DBG_PRINT, "(GRADING2A 2.b)\n");
    if(pathname[0] == '/')
    {
        dbg(DBG_PRINT, "(GRADING2A)\n");
        txt_strt++;
        loc_base = vget(vfs_root_vn->vn_fs, vfs_root_vn->vn_vno);
    }
    else 
        {/* base == NULL */
        dbg(DBG_PRINT, "(GRADING2B)\n");
        loc_base = vget(curproc->p_cwd->vn_fs, curproc->p_cwd->vn_vno);
       }

    str_len = strlen(pathname);
    if(str_len != 1)
    {   dbg(DBG_PRINT, "(GRADING2A\n");
        while(pathname[str_len - 1] == '/')
        {
            dbg(DBG_PRINT, "(GRADING2B)\n");
            str_len--;
        }
    }

    for(i = txt_strt; i < str_len; i++)
    {
        frag_len = 0;
        while((pathname[i] != '/') && (i < str_len))
        {
            dbg(DBG_PRINT, "(GRADING2A)\n");
            frag_len++;
            i++;
        }
        dbg(DBG_PRINT, "(GRADING2A)\n");
        *name = &pathname[i - frag_len];
        *namelen = frag_len;

        if(i == str_len)
        {
            /*if(!S_ISDIR(loc_base->vn_mode))
            {
                return -ENOTDIR;
            }*/
            *res_vnode = loc_base;
            KASSERT(NULL != namelen);
            dbg(DBG_PRINT, "(GRADING2A 2.b)\n");
            KASSERT(NULL != name);
            dbg(DBG_PRINT, "(GRADING2A 2.b)\n");
            KASSERT(NULL != res_vnode);
            dbg(DBG_PRINT, "(GRADING2A 2.b)\n");
            return 0;
        }

        if(pathname[i + 1] == '/')
        {
            dbg(DBG_PRINT, "(GRADING2B)\n");
            while(pathname[++i] == '/');
            i--;
        }

        ret_val = lookup(loc_base, *name, *namelen, res_vnode);

        if(ret_val < 0)
        {
            dbg(DBG_PRINT, "(GRADING2B)\n");
            vput(loc_base);
            return ret_val;
        }
        else
        {
            dbg(DBG_PRINT, "(GRADING2A)\n");
            vput(loc_base);
            loc_base  = *res_vnode;
            /*vput(loc_base);*/
        }

    }

    /*loc_base = vfs_root_vn;*/
    *name = &pathname[0];
    *namelen = 1;
    *res_vnode = loc_base;
    KASSERT(NULL != namelen);
    dbg(DBG_PRINT, "(GRADING2A 2.b)\n");
    KASSERT(NULL != name);
    dbg(DBG_PRINT, "(GRADING2A 2.b)\n");
    KASSERT(NULL != res_vnode);
    dbg(DBG_PRINT, "(GRADING2A 2.b)\n");
    return 0;


}

/* This returns in res_vnode the vnode requested by the other parameters.
 * It makes use of dir_namev and lookup to find the specified vnode (if it
 * exists).  flag is right out of the parameters to open(2); see
 * <weenix/fcntl.h>.  If the O_CREAT flag is specified, and the file does
 * not exist call create() in the parent directory vnode.
 *
 * Note: Increments vnode refcount on *res_vnode.
 */
int
open_namev(const char *pathname, int flag, vnode_t **res_vnode, vnode_t *base)
{
	dbg(DBG_PRINT, "(GRADING2A)\n");
	const char* string=NULL;
    vnode_t *dir;
	size_t length =0, str_len;
	int result;
    
	

    if((str_len = strlen(pathname))<=0)
    {
        dbg(DBG_PRINT, "(GRADING2B)\n");
        return -EINVAL;
    }

    if((result = dir_namev(pathname,&length,&string,base,&dir))<0)
    {
        dbg(DBG_PRINT, "(GRADING2B)\n");
    	return result;
    }
    
    if(strlen(string)>MAXPATHLEN)
    {
        dbg(DBG_PRINT, "(GRADING2B)\n");
        return -ENAMETOOLONG;
    }

    if(string[0] == '/')
    {
        dbg(DBG_PRINT, "(GRADING2B)\n");    
        *res_vnode = dir;
        return result;
    }

   result = lookup(dir,string,length,res_vnode);
   if(result){
    /*lookup failed need to create*/
    dbg(DBG_PRINT, "(GRADING2B)\n");
    if((flag & O_CREAT) && (result == -ENOENT)){
        KASSERT(NULL != dir->vn_ops->create);
         dbg(DBG_PRINT, "(GRADING2A 2.c)\n");
        result = dir->vn_ops->create(dir,string,length,res_vnode);
        if(result<0){
            dbg(DBG_PRINT, "(GRADING2B)\n");
            vput(dir);
            return result;
        }
    }
    else{
        dbg(DBG_PRINT, "(GRADING2B)\n");
        vput(dir);
        return result;
    }
   }
   dbg(DBG_PRINT, "(GRADING2A)\n");
   vput(dir);
   return result;
}

#ifdef __GETCWD__
/* Finds the name of 'entry' in the directory 'dir'. The name is writen
 * to the given buffer. On success 0 is returned. If 'dir' does not
 * contain 'entry' then -ENOENT is returned. If the given buffer cannot
 * hold the result then it is filled with as many characters as possible
 * and a null terminator, -ERANGE is returned.
 *
 * Files can be uniquely identified within a file system by their
 * inode numbers. */
int
lookup_name(vnode_t *dir, vnode_t *entry, char *buf, size_t size)
{
        NOT_YET_IMPLEMENTED("GETCWD: lookup_name");
        return -ENOENT;
}


/* Used to find the absolute path of the directory 'dir'. Since
 * directories cannot have more than one link there is always
 * a unique solution. The path is writen to the given buffer.
 * On success 0 is returned. On error this function returns a
 * negative error code. See the man page for getcwd(3) for
 * possible errors. Even if an error code is returned the buffer
 * will be filled with a valid string which has some partial
 * information about the wanted path. */
ssize_t
lookup_dirpath(vnode_t *dir, char *buf, size_t osize)
{
        NOT_YET_IMPLEMENTED("GETCWD: lookup_dirpath");

        return -ENOENT;
}
#endif /* __GETCWD__ */
